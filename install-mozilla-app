#!/bin/bash

# -f          : disable filename expansion
# -o pipefail : generate a failure return code if any command in a chain
#               of piped commands fails.
set -f -o pipefail

################################################################################
# LICENSE
#
# This software is released under the Revised BSD License.
# 
# Copyright (c) 2015, Ryan Chapin, http:www.ryanchapin.com         
# All rights reserved.                     
#                                                                     
# Redistribution  and  use  in  source  and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#                                                                     
# *   Redistributions  of  source  code  must  retain  the  above
# copyright  notice,  this  list  of conditions and the following
# disclaimer.
# 
# *  Redistributions  in  binary  form  must  reproduce the above
# copyright  notice,  this  list  of conditions and the following
# disclaimer  in the documentation andor other materials provided
# with the distribution.
# 
# *  Neither  the  name  of  Ryan  Chapin  nor  the  names of its
# contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#                                                                     
# THIS   SOFTWARE  IS  PROVIDED  BY  THE  COPYRIGHT  HOLDERS  AND
# CONTRIBUTORS  "AS  IS"  AND  ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING,  BUT  NOT  LIMITED  TO,  THE  IMPLIED  WARRANTIES OF
# MERCHANTABILITY  AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
# DISCLAIMED.   IN   NO  EVENT  SHALL  RYAN  CHAPIN,  ANY  HEIRS,
# SUCCESSORS,  EXECUTORS AND OR ASSIGNS BE LIABLE FOR ANY DIRECT,
# INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL
# DAMAGES   (INCLUDING,   BUT  NOT  LIMITED  TO,  PROCUREMENT  OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS  INTERRUPTION)  HOWEVER  CAUSED  AND  ON ANY THEORY OF
# LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
# (INCLUDING  NEGLIGENCE  OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#
# Script to automate the download, and installation of mozilla binaries into
# a customizable directory which are accessed by a symlink.
#
# name:     install-mozilla-app
# author:   Ryan Chapin
# created:  2014-07-06
# updated:  2015-09-28
# version:  1.05
#
################################################################################
# EXIT CODES:
#
# 1 : Failed to parse input arguments.
# 2 : APP argument was not provided or did not parse correctly.
# 3 : Config file did not provide required variables/were empty.
# 4 : Required directory did not exist.
# 10: wget command failed.
# 20: checksums did not match
#
################################################################################
# FUNCTIONS:
#

#
# Debugging, verbose output, and output to STDERR; accepts two required
# arguments.  The third is optional and use with the e option.
#  $1 = OUTPUT_TYPE [v (verbose) | d (debug) | e (error) 
#  $2 = OUTPUT_MSG
function output_msg {
   if [ "e" = "$1" ]
   then
      >&2 echo "$2"
      exit "$3"
   fi

   if [ "v" = "$1" ] && [ 1 -eq "$VERBOSE" ];
   then
      echo "$2"
   fi   

   if [ "d" = "$1" ] && [ 1 -eq "$DEBUG" ];
   then
      echo "$2"
   fi 
}

#
# Abstraction for calling wget, supressing its stdout/stderr and checking the
# exit code from wget.
# Accepts one argument:
#  $1 = URL the url to download
function download_file {
   local URL=$1
   CMD="wget $URL"
   
   if [ 1 -ne "$VERBOSE" ];
   then
      CMD="$CMD > /dev/null 2>&1"
   fi
   
   eval $CMD
   
   if [ 0 -ne $? ];
   then
      output_msg v "ERROR: Command \'$CMD\' failed" 10
   fi
}

function dir_exists {
   DIR_TO_CHECK=$1

   if [ ! -d "$DIR_TO_CHECK" ];
   then
      read -r -d '' ERR_MSG << EOF
ERROR: Directory, '$DIR_TO_CHECK' does not exist.
       Check the aformentioned var in your .conf file.
EOF
      output_msg e "$ERR_MSG" 4
   fi
}

function var_is_set {
   VAR_VAL=$1
   VAR_NAME=$2

   if [ -z "$VAR_VAL" ];
   then
      read -r -d '' ERR_MSG << EOF
ERROR: Required variable '\$$VAR_NAME' was not set.
       Check the aformentioned var in your .conf file.
EOF
      output_msg e "$ERR_MSG" 3
   fi
}

################################################################################
# CONFIGURATIONS:
#

# Name of the directory to be created into which we will unpack our download
# file
UNPACK_DIR="install_moz_app_temp"

# Name of the user defined configs file
USER_CONF_FILE="install-mozilla-app.conf"

# Pull in the user configurations
source /etc/${USER_CONF_FILE} 

# Urls to the files to downloaded.  The prefix and suffixes will be concatenated
# with the name of the application, the language, and OS.
BIN_BASE_URL_PREFIX=https://ftp.mozilla.org/pub/mozilla.org
BIN_BASE_URL_SUFFIX=releases/latest/${OS_VERSION}/${LANGUAGE}

SHA_SUMS_FILE=SHA512SUMS
SHA_SUMS_URL_PREFIX=https://ftp.mozilla.org/pub/mozilla.org
SHA_SUMS_URL_SUFFIX=releases/latest/${SHA_SUMS_FILE}

################################################################################

function about {
   cat << EOF
About: install-mozilla-app - Automates   the   download,    verification     and
                             installation of distributions of mozilla  binaries.
                             Currently, supports firefox and thunderbird and any
                             other  binaries  that  follow  the  same  directory
                             layout on the ftp.mozilla.org download site.
EOF
}

function usage {
   cat << EOF
Usage: install-mozilla-app [OPTIONS] -a APP [firefox|thunderbird]

   -a APP
      The mozilla application to be installed, either firefox or thunderbird

Options:
   -h HELP
      Outputs this basic usage information.

   -v VERBOSE
      Output  additional  feedback/information  during  runtime.   Without  this
      option the program will not generate any runtime output.

   -d DEBUG
      Set debugging output to on.

   --more-help EXTENDED HELP
      Extended help and documentation.
EOF
}

function extended_usage {
cat << EOF
Extended Usage:

   Users are required to edit and configure the  $USER_CONF_FILE.
   It  is  self explainatory and will enable the user to configure the directory
   into which the files are downloaded,  unpacked,  verified,   and   ultimately
   installed.

   In this context, installed means moved to the parent directory  as  specified
   in the conf file and a generic symlink created to point to the most  recently
   downloaded binary.

   This enables the user to create whatever flavor of alias, or  launcher  which
   will always refer to the most recently downloaded and installed version.

   The most common problems using this  script  arise  from  misconfiguring  the
   install-mozilla-app.conf and  not  including  valid  OS_VERSION  or  LANGUAGE
   strings that are used on the mozilla download site as those values  are  used
   to concatenate the URLs from which files are downloaded.

Examples:

   Given the following configuration:

OS_VERSION="linux-x86_64"
LANGUAGE="en-US"
INSTALL_DIR="/usr/local"
UNPACK_PARENT_DIR="/tmp"

   And the following invocation:

   $ ./install-mozilla-app -v -d -a firefox

   The firefox binary for linux-x86_64 in US English will be downloaded  to  the
   /tmp directory.  The file will be unpacked and verified  in  /tmp.   Assuming
   that the most current version  of  firefox  is  36.0.1,  the  directory  that
   contains the firefox binary and  its  attendant  files  will  be  renamed  to
   'firefox-36.0.1' and then it will be moved to  the  INSTALL_DIR  (/usr/local)
   as specified in the configs.  Then once moved to /usr/local  a  symlink  will
   be created in /usr/local: firefox -> firefox-36.0.1
EOF
}


HELP=0
VERBOSE=0
MORE_HELP=0
DEBUG=0
APP=""

PARSED_OPTIONS=`getopt -o hvda: -l more-help -- "$@"`

# Check to see if the getopts command failed
if [ $? -ne 0 ];
then
   output_msg e "ERROR: Failed to parse arguments" 1
fi

eval set -- "$PARSED_OPTIONS"

# Loop through all of the options with a case statement
while true; do
   case "$1" in
      -h)
         HELP=1
         shift
         ;;

      -v)
         VERBOSE=1
         shift
         ;;

      -d)
         DEBUG=1
         shift
         ;;

      -a)
         APP=$2
         shift 2
         ;;

      --more-help)
         MORE_HELP=1
         shift 
         ;;

      --)
         shift
         break
         ;;
   esac
done

################################################################################

if [ "$MORE_HELP" -eq 1 ];
then
   about
   usage
   echo ""
   extended_usage
   exit 0
fi

if [ "$HELP" -eq 1 ];
then
   usage
   exit 0
fi

output_msg d "-a HELP arg = $HELP"
output_msg d "-a VERBOSE arg = $VERBOSE"
output_msg d "-a MORE_HELP arg = $MORE_HELP"
output_msg d "-a DEBUG arg = $DEBUG"
output_msg d "-a APP arg = $APP"

#
# Check that the required arguments were provided
#
if [ -z "$APP" ];
then
   output_msg e "ERROR: no application key was specified" 2
fi

#
# Verify that all of the required configs have been set 
#
var_is_set "$OS_VERSION" "OS_VERSION"
var_is_set "$LANGUAGE" "LANGUAGE"
var_is_set "$INSTALL_DIR" "INSTALL_DIR"
var_is_set "$UNPACK_PARENT_DIR" "UNPACK_PARENT_DIR"

dir_exists "$INSTALL_DIR"
dir_exists "$UNPACK_PARENT_DIR"

BINARY_NAME=$APP
output_msg v "Installing mozilla app: $APP"


#
# Configs for each OS version:
# The following is a series of associative arrays that contain the configs
# necessary to properly concatenate the urls and file names for the files for
# each OS version.
#

APP_NAME=$(echo $APP | tr [:lower:] [:upper:])
output_msg d "APP_NAME = $APP_NAME"

declare -A FIREFOX_CONF_LINUX_i686
FIREFOX_CONF_LINUX_i686=([fn_prefix]=firefox- [fn_extension]=".tar.bz2")

declare -A FIREFOX_CONF_LINUX_x86_64
FIREFOX_CONF_LINUX_x86_64=([fn_prefix]=firefox- [fn_extension]=".tar.bz2")

declare -A FIREFOX_CONF_MAC
FIREFOX_CONF_MAC=([fn_prefix]="Firefox " [fn_extension]=".dmg")

declare -A FIREFOX_CONF_WIN32
FIREFOX_CONF_WIN32=([fn_prefix]="Firefox Setup " [fn_extension]=".exe")

declare -A FIREFOX_CONF
FIREFOX_CONF=(
   [linux-i686]=FIREFOX_CONF_LINUX_i686
   [linux-x86_64]=FIREFOX_CONF_LINUX_x86_64
   [mac]=FIREFOX_CONF_MAC
   [win32]=FIREFOX_CONF_WIN32
)

declare -A THUNDERBIRD_CONF_LINUX_i686
THUNDERBIRD_CONF_LINUX_i686=([fn_prefix]=thunderbird- [fn_extension]=".tar.bz2")

declare -A THUNDERBIRD_CONF_LINUX_x86_64
THUNDERBIRD_CONF_LINUX_x86_64=([fn_prefix]=thunderbird- [fn_extension]=".tar.bz2")

declare -A THUNDERBIRD_CONF_MAC
THUNDERBIRD_CONF_MAC=([fn_prefix]="Thunderbird " [fn_extension]=".dmg")

declare -A THUNDERBIRD_CONF_WIN32
THUNDERBIRD_CONF_WIN32=([fn_prefix]="Thunderbird Setup " [fn_extension]=".exe")

declare -A THUNDERBIRD_CONF
THUNDERBIRD_CONF=(
   [linux-i686]=THUNDERBIRD_CONF_LINUX_i686
   [linux-x86_64]=THUNDERBIRD_CONF_LINUX_x86_64
   [mac]=THUNDERBIRD_CONF_MAC
   [win32]=THUNDERBIRD_CONF_WIN32
)

CMD_OS_VERSION_ARRAY_NAME="echo \"\${${APP_NAME}_CONF[${OS_VERSION}]}\""
output_msg d "CMD_OS_VERSION_ARRAY_NAME = $CMD_OS_VERSION_ARRAY_NAME"
OS_VERSION_ARRAY_NAME=$(eval $CMD_OS_VERSION_ARRAY_NAME)
output_msg d "OS_VERSION_ARRAY_NAME = $OS_VERSION_ARRAY_NAME"

CMD_PREFIX="echo \"\${${OS_VERSION_ARRAY_NAME}[fn_prefix]}\""
output_msg d "CMD_PREFIX = $CMD_PREFIX"
FN_PREFIX=$(eval $CMD_PREFIX)
output_msg d "FN_PREFIX = $FN_PREFIX"

CMD_EXTENSION="echo \"\${${OS_VERSION_ARRAY_NAME}[fn_extension]}\""
output_msg d "CMD_EXTENSION = $CMD_EXTENSION"
FN_EXTENSION=$(eval $CMD_EXTENSION)
output_msg d "FN_EXTENSION = $FN_EXTENSION"


# Concatenate the urls of both the binary to be downloaded and the checksum
# files to be downloaded
BIN_BASE_URL=${BIN_BASE_URL_PREFIX}/${BINARY_NAME}/${BIN_BASE_URL_SUFFIX}
SHA_SUMS_URL=${SHA_SUMS_URL_PREFIX}/${BINARY_NAME}/${SHA_SUMS_URL_SUFFIX}

START_DIR=`pwd`

cd $UNPACK_PARENT_DIR

#
# Check to see if there is an existing UNPACK_DIR
#
if [ -d "$UNPACK_DIR" ];
then
   output_msg v "Deleting an existing UNPACK_DIR, ${UNPACK_PARENT_DIR}/${UNPACK_DIR}"
   rm -rf $UNPACK_DIR
fi

mkdir $UNPACK_DIR
cd $UNPACK_DIR

#
# Get the index.html that contains the name of the latest bz2 file
#
output_msg v "------------------------------"
output_msg v "-- Downloading the index.html"
output_msg v "--"

WGET_INDEX_URL="${BIN_BASE_URL}/"
download_file $WGET_INDEX_URL

#
# Dynamically generate the grep command that will pull the file name
# out of the downloaded html
#

# Replace any spaces in the file name with '%20'
FILE_TO_DOWNLOAD_CONCATD=$(echo ${FN_PREFIX}.*${FN_EXTENSION} | sed 's/ /%20/g')
output_msg d "FILE_TO_DOWNLOAD_CONCATD = $FILE_TO_DOWNLOAD_CONCATD"

GREP_CMD="grep -oh '$FILE_TO_DOWNLOAD_CONCATD\"' index.html | sed 's/\"//g'"
output_msg d "Download file GREP_CMD = $GREP_CMD"

FILE_TO_DOWNLOAD_PER20=$(eval "$GREP_CMD")
output_msg d "FILE_TO_DOWNLOAD_PER20 = $FILE_TO_DOWNLOAD_PER20"

# Remove any %20 and replace for spaces
FILE_TO_DOWNLOAD_SANS_PER20=$(echo "$FILE_TO_DOWNLOAD_PER20" | sed 's/%20/ /g')
output_msg d "FILE_TO_DOWNLOAD_SANS_PER20 = $FILE_TO_DOWNLOAD_SANS_PER20"

#
# Get the version number from the file name
#
GREP_CMD="echo "$FILE_TO_DOWNLOAD_PER20" | grep -oh '[0-9]\{1,2\}[.][0-9]\{1,2\}[.0-9]\{1,2\}\?'"
VERSION_NUMBER=$(eval "$GREP_CMD")

#
# Run another regex on the string to make sure that we lop off any
# trailing '.' if there is one
#
GREP_CMD="echo $VERSION_NUMBER | grep -oh '[.0-9].*[0-9]'"
VERSION_NUMBER=$(eval "$GREP_CMD")
output_msg d "VERSION_NUMBER = $VERSION_NUMBER"


output_msg v "------------------------------"
output_msg v "-- Downloading FILE_TO_DOWNLOAD, $FILE_TO_DOWNLOAD"
output_msg v "--"

WGET_INDEX_URL="${BIN_BASE_URL}/"
download_file "${BIN_BASE_URL}/${FILE_TO_DOWNLOAD_PER20}"

#
# Download the SHA512SUMS for the file and check that the downloaded binary
# shasums match
#
output_msg v "------------------------------"
output_msg v "-- Downloading shasum file"
output_msg v "--"

download_file $SHA_SUMS_URL


SHA_KEY="${OS_VERSION}/${LANGUAGE}/${FILE_TO_DOWNLOAD_SANS_PER20}"
output_msg d "SHA_KEY = $SHA_KEY"

GREP_CMD="grep '$SHA_KEY' $SHA_SUMS_FILE"
output_msg d "SHA_KEY GREP_CMD = $GREP_CMD"

SHA_SUM_LINE=$(eval "$GREP_CMD")
SHA_SUM=$(echo $SHA_SUM_LINE | awk '{print $1}')
output_msg d "SHA_SUM = $SHA_SUM"

FILE_TO_DOWNLOAD_SHA_SUM=$(sha512sum "$FILE_TO_DOWNLOAD_SANS_PER20" | awk '{print $1}')
output_msg d "FILE_TO_DOWNLOAD_SHA_SUM = $FILE_TO_DOWNLOAD_SHA_SUM"

SHA_SUM_MATCHED=false

if [ "$SHA_SUM" == "$FILE_TO_DOWNLOAD_SHA_SUM" ];
then
   SHA_SUM_MATCHED=true
fi
output_msg d "SHA_SUM_MATCHED = $SHA_SUM_MATCHED"

if [ "$SHA_SUM_MATCHED" = true ];
then
   output_msg v "SHASUMs matched"
fi

#
# Only continue unpacking and installing the program if the hashes validated
# and are running (or at least configured as) under Linux.
#
if [ "$SHA_SUM_MATCHED" = true ] && [[ $OS_VERSION == *"linux"* ]];
then
   output_msg v "Continuing installation...."

   #
   # Unpack the bz2 file and then rename it to include the version number
   #
   output_msg v "Unpacking the ${FILE_TO_DOWNLOAD_SANS_PER20} file"
   tar -xjf $FILE_TO_DOWNLOAD_SANS_PER20
   BIN_DIR_W_VERSION=${BINARY_NAME}-${VERSION_NUMBER}
   mv $BINARY_NAME ${BIN_DIR_W_VERSION}

   #
   # mv it to the directory into which we are going to install it
   #
   output_msg v "Moving the unpacked dir $BIN_DIR_W_VERSION to $INSTALL_DIR"
   rm -rf $INSTALL_DIR/$BIN_DIR_W_VERSION
   mv $BIN_DIR_W_VERSION $INSTALL_DIR

   #
   # Updated the symlink
   #
   output_msg v "Updating the symlink to point to $BIN_DIR_W_VERSION"
   cd $INSTALL_DIR
   ln -sfn $BIN_DIR_W_VERSION $BINARY_NAME

   output_msg v "Update of ${BINARY_NAME} complete"
fi

if [ "$SHA_SUM_MATCHED" = false ];
then
   read -r -d '' ERR_MSG << EOF
ERROR: The sha512sums did NOT match
       Exiting...
EOF
   output_msg e "$ERR_MSG" 20
fi

#
# Clean-up the intermediary data and downloaded files.
#
output_msg v "Performing cleanup of intermediary data/files"
cd $UNPACK_PARENT_DIR
rm -rf $UNPACK_DIR

cd $START_DIR
